<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FPL Controllable Load Model</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light gray background */
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 2rem;
            box-sizing: border-box;
        }
        .model-container {
            background-color: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 2.5rem;
            width: 100%;
            max-width: 1200px; /* Wider for more content */
            box-sizing: border-box;
        }
        h1 {
            font-size: 2.25rem; /* text-4xl */
            font-weight: 700; /* font-bold */
            color: #1e293b; /* slate-900 */
            margin-bottom: 0.5rem;
            text-align: center;
        }
        h2 {
            font-size: 1.5rem; /* text-2xl */
            font-weight: 600; /* font-semibold */
            color: #334155; /* slate-700 */
            margin-top: 2rem;
            margin-bottom: 1rem;
            border-bottom: 2px solid #e2e8f0; /* slate-200 */
            padding-bottom: 0.5rem;
        }
        h3 {
            font-size: 1.25rem; /* text-xl */
            font-weight: 600; /* font-semibold */
            color: #475569; /* slate-600 */
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
        }
        .input-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 1rem;
        }
        .input-group label {
            font-weight: 500;
            color: #475569;
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }
        .input-group input[type="number"],
        .input-group input[type="text"] {
            padding: 0.6rem 0.8rem;
            border: 1px solid #cbd5e1; /* slate-300 */
            border-radius: 0.5rem;
            font-size: 1rem;
            color: #1e293b;
            background-color: #f8fafc; /* slate-50 */
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .input-group input:focus {
            outline: none;
            border-color: #6366f1; /* indigo-500 */
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2); /* indigo-500 with opacity */
        }
        .grid-inputs {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 1.5rem;
            background-color: #f8fafc; /* slate-50 */
            border-radius: 0.75rem;
            overflow: hidden; /* Ensures rounded corners apply to content */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        th, td {
            padding: 0.8rem 1rem;
            border-bottom: 1px solid #e2e8f0; /* slate-200 */
            text-align: right;
            font-size: 0.9rem;
            color: #334155; /* slate-700 */
        }
        th {
            background-color: #e2e8f0; /* slate-200 */
            font-weight: 600;
            color: #1e293b; /* slate-900 */
            text-align: center;
        }
        th:first-child, td:first-child {
            text-align: left;
        }
        tr:last-child td {
            border-bottom: none;
        }
        tbody tr:hover {
            background-color: #eff6ff; /* blue-50 */
        }
        .summary-table th, .summary-table td {
            font-size: 1rem;
            font-weight: 500;
        }
        .summary-table th:first-child {
             text-align: left;
        }
        .summary-table td:last-child {
            font-weight: 700;
            color: #10b981; /* emerald-500 */
        }

        /* Chart Styling (Simple ASCII/Bar Chart) */
        .chart-container {
            margin-top: 2rem;
            padding: 1.5rem;
            background-color: #e0f2f7; /* light blue */
            border-radius: 0.75rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            overflow-x: auto; /* Allow scrolling for wider charts */
        }
        .chart-row {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
            font-family: monospace;
            font-size: 0.85rem;
            color: #083344; /* cyan-900 */
        }
        .chart-year {
            width: 40px;
            text-align: right;
            padding-right: 5px;
        }
        .chart-bar-container {
            flex-grow: 1;
            height: 16px;
            background-color: #a7f3d0; /* emerald-200 */
            border-radius: 4px;
            position: relative;
            margin-right: 10px;
        }
        .chart-bar {
            height: 100%;
            background-color: #0d9488; /* teal-600 */
            border-radius: 4px;
            transition: width 0.5s ease-out;
        }
        .chart-value {
            min-width: 60px;
            text-align: left;
            font-weight: bold;
        }
        .chart-label {
            font-weight: bold;
            margin-bottom: 1rem;
            color: #083344;
            text-align: center;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .model-container {
                padding: 1.5rem;
            }
            h1 {
                font-size: 1.75rem; /* text-3xl */
            }
            h2 {
                font-size: 1.25rem; /* text-xl */
            }
            h3 {
                font-size: 1rem; /* text-lg */
            }
            .grid-inputs {
                grid-template-columns: 1fr; /* Stack inputs vertically */
            }
            table, th, td {
                font-size: 0.8rem;
                padding: 0.6rem 0.8rem;
            }
            .chart-year {
                width: 30px;
            }
            .chart-value {
                min-width: 50px;
            }
        }
    </style>
</head>
<body>
    <div class="model-container">
        <h1>FPL Controllable Load Financial Model</h1>
        <p class="text-gray-600 text-center mb-8">Quantifying Load Reduction from HVAC & Water Heater On-Bill Programs</p>

        <!-- Tab 1: Assumptions & Inputs -->
        <h2>1. Assumptions & Inputs</h2>
        <p class="text-gray-500 mb-6 text-sm">Adjust these values to see their impact on the projected controllable load.</p>

        <div class="grid-inputs">
            <div class="input-group">
                <label for="projectionYears">A. Program Horizon (Years)</label>
                <input type="number" id="projectionYears" value="15" min="1" max="30">
            </div>
            <div class="input-group">
                <label for="totalAddressableHomeowners">B. Total Addressable Homeowners (FPL Service Territory)</label>
                <input type="number" id="totalAddressableHomeowners" value="3200000" min="100000">
            </div>
            <div class="input-group">
                <label for="adoptionRateY1_2">Annual Adoption Rate - Year 1-2 (Ramp-up %)</label>
                <input type="number" id="adoptionRateY1_2" value="1.5" step="0.1" min="0">
            </div>
            <div class="input-group">
                <label for="adoptionRateY3_5">Annual Adoption Rate - Year 3-5 (Growth %)</label>
                <input type="number" id="adoptionRateY3_5" value="4.0" step="0.1" min="0">
            </div>
            <div class="input-group">
                <label for="adoptionRateY6_10">Annual Adoption Rate - Year 6-10 (Mature %)</label>
                <input type="number" id="adoptionRateY6_10" value="2.5" step="0.1" min="0">
            </div>
            <div class="input-group">
                <label for="adoptionRateY11_15plus">Annual Adoption Rate - Year 11-15+ (Steady State %)</label>
                <input type="number" id="adoptionRateY11_15plus" value="1.5" step="0.1" min="0">
            </div>
            <div class="input-group">
                <label for="hvacLifespan">HVAC New Device Lifespan (Years)</label>
                <input type="number" id="hvacLifespan" value="18" min="5">
            </div>
            <div class="input-group">
                <label for="whLifespan">Water Heater New Device Lifespan (Years)</label>
                <input type="number" id="whLifespan" value="14" min="5">
            </div>
            <div class="input-group">
                <label for="hvacKwReduction">C. HVAC Average kW Reduction per Device (during event)</label>
                <input type="number" id="hvacKwReduction" value="1.5" step="0.1" min="0.1">
            </div>
            <div class="input-group">
                <label for="whKwReduction">Water Heater Average kW Reduction per Device (during event)</label>
                <input type="number" id="whKwReduction" value="2.0" step="0.1" min="0.1">
            </div>
            <div class="input-group">
                <label for="coincidenceFactor">Coincidence Factor (for Controllable Load %)</label>
                <input type="number" id="coincidenceFactor" value="80" step="1" min="0" max="100">
            </div>
            <div class="input-group">
                <label for="participationRate">Customer Participation/Availability Rate (during event %)</label>
                <input type="number" id="participationRate" value="88" step="1" min="0" max="100">
            </div>
        </div>

        <!-- Tab 2: Device-Specific Load Projections -->
        <h2>2. Device-Specific Load Projections</h2>

        <h3>Central HVAC Projections</h3>
        <div class="overflow-x-auto">
            <table id="hvacProjectionsTable">
                <thead>
                    <tr>
                        <th>Year</th>
                        <th>Eligible Market Remaining</th>
                        <th>Annual Adoption Rate (%)</th>
                        <th>New Installations (Units)</th>
                        <th>Cumulative Installations (Units)</th>
                        <th>Devices Retired This Year (Units)</th>
                        <th>Cumulative Active Devices (Units)</th>
                        <th>Annual Controllable Load (kW)</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>

        <h3>Water Heater Projections</h3>
        <div class="overflow-x-auto">
            <table id="whProjectionsTable">
                <thead>
                    <tr>
                        <th>Year</th>
                        <th>Eligible Market Remaining</th>
                        <th>Annual Adoption Rate (%)</th>
                        <th>New Installations (Units)</th>
                        <th>Cumulative Installations (Units)</th>
                        <th>Devices Retired This Year (Units)</th>
                        <th>Cumulative Active Devices (Units)</th>
                        <th>Annual Controllable Load (kW)</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Tab 3: Total Controllable Load Summary -->
        <h2>3. Total Controllable Load Summary</h2>
        <p class="text-gray-500 mb-4 text-sm">This shows the total controllable load capacity FPL can manage over time.</p>
        <div class="overflow-x-auto">
            <table id="summaryTable" class="summary-table">
                <thead>
                    <tr>
                        <th>Year</th>
                        <th>HVAC Controllable Load (kW)</th>
                        <th>Water Heater Controllable Load (kW)</th>
                        <th>Total Controllable Load (kW)</th>
                        <th>Total Controllable Load (MW)</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>

        <div class="chart-container">
            <div class="chart-label">Total Controllable Load (MW) Over Time</div>
            <div id="controllableLoadChart">
                <!-- Chart bars will be populated by JavaScript -->
            </div>
        </div>

    </div>

    <script>
        // --- Model Data and State ---
        const model = {
            assumptions: {
                projectionYears: 15,
                totalAddressableHomeowners: 3200000,
                adoptionRateY1_2: 0.015, // 1.5%
                adoptionRateY3_5: 0.040, // 4.0%
                adoptionRateY6_10: 0.025, // 2.5%
                adoptionRateY11_15plus: 0.015, // 1.5%
                hvacLifespan: 18, // years
                whLifespan: 14, // years
                hvacKwReduction: 1.5, // kW
                whKwReduction: 2.0, // kW
                coincidenceFactor: 0.80, // 80%
                participationRate: 0.88, // 88%
            },
            hvacProjections: [],
            whProjections: [],
            summary: [],
        };

        // --- DOM Elements ---
        const inputElements = {
            projectionYears: document.getElementById('projectionYears'),
            totalAddressableHomeowners: document.getElementById('totalAddressableHomeowners'),
            adoptionRateY1_2: document.getElementById('adoptionRateY1_2'),
            adoptionRateY3_5: document.getElementById('adoptionRateY3_5'),
            adoptionRateY6_10: document.getElementById('adoptionRateY6_10'),
            adoptionRateY11_15plus: document.getElementById('adoptionRateY11_15plus'),
            hvacLifespan: document.getElementById('hvacLifespan'),
            whLifespan: document.getElementById('whLifespan'),
            hvacKwReduction: document.getElementById('hvacKwReduction'),
            whKwReduction: document.getElementById('whKwReduction'),
            coincidenceFactor: document.getElementById('coincidenceFactor'),
            participationRate: document.getElementById('participationRate'),
        };

        const hvacTableBody = document.querySelector('#hvacProjectionsTable tbody');
        const whTableBody = document.querySelector('#whProjectionsTable tbody');
        const summaryTableBody = document.querySelector('#summaryTable tbody');
        const controllableLoadChart = document.getElementById('controllableLoadChart');

        // --- Calculation Logic ---

        /**
         * Calculates the annual adoption rate based on the current year and defined tiers.
         * @param {number} year - The current year in the projection.
         * @param {object} assumptions - The model's assumption object.
         * @returns {number} The adoption rate for the given year (as a decimal).
         */
        function getAnnualAdoptionRate(year, assumptions) {
            if (year >= 1 && year <= 2) {
                return assumptions.adoptionRateY1_2;
            } else if (year >= 3 && year <= 5) {
                return assumptions.adoptionRateY3_5;
            } else if (year >= 6 && year <= 10) {
                return assumptions.adoptionRateY6_10;
            } else if (year >= 11) {
                return assumptions.adoptionRateY11_15plus;
            }
            return 0; // Should not happen for year 0 or invalid years
        }

        /**
         * Runs the core financial model calculations for a specific device type.
         * @param {string} deviceType - 'hvac' or 'wh'.
         * @param {object} assumptions - The model's assumption object.
         * @returns {Array<object>} An array of annual projection objects.
         */
        function calculateDeviceProjections(deviceType, assumptions) {
            const projections = [];
            const deviceLifespan = assumptions[`${deviceType}Lifespan`];
            const avgKwReduction = assumptions[`${deviceType}KwReduction`];
            const totalAddressable = assumptions.totalAddressableHomeowners;
            const coincidenceFactor = assumptions.coincidenceFactor;
            const participationRate = assumptions.participationRate;

            // Initialize Year 0
            projections.push({
                year: 0,
                eligibleMarketRemaining: totalAddressable,
                annualAdoptionRate: 0,
                newInstallations: 0,
                cumulativeInstallations: 0,
                devicesRetired: 0,
                cumulativeActiveDevices: 0,
                annualControllableLoad: 0,
            });

            for (let y = 1; y <= assumptions.projectionYears; y++) {
                const prevYearData = projections[y - 1];
                const annualAdoptionRate = getAnnualAdoptionRate(y, assumptions);

                // Ensure eligible market doesn't go below 0
                const eligibleMarketRemaining = Math.max(0, prevYearData.eligibleMarketRemaining - prevYearData.newInstallations);
                const newInstallations = Math.floor(eligibleMarketRemaining * annualAdoptionRate);
                const cumulativeInstallations = prevYearData.cumulativeInstallations + newInstallations;

                // Calculate devices retired
                let devicesRetired = 0;
                if (y > deviceLifespan) {
                    // Find installations from 'deviceLifespan' years ago
                    const yearOfInstallationForRetirement = y - deviceLifespan;
                    if (projections[yearOfInstallationForRetirement]) {
                        devicesRetired = projections[yearOfInstallationForRetirement].newInstallations;
                    }
                }

                const cumulativeActiveDevices = Math.max(0, prevYearData.cumulativeActiveDevices + newInstallations - devicesRetired);

                // Controllable Load Calculation
                const annualControllableLoad = cumulativeActiveDevices * avgKwReduction * (coincidenceFactor / 100) * (participationRate / 100);

                projections.push({
                    year: y,
                    eligibleMarketRemaining: eligibleMarketRemaining,
                    annualAdoptionRate: annualAdoptionRate,
                    newInstallations: newInstallations,
                    cumulativeInstallations: cumulativeInstallations,
                    devicesRetired: devicesRetired,
                    cumulativeActiveDevices: cumulativeActiveDevices,
                    annualControllableLoad: annualControllableLoad,
                });
            }
            return projections;
        }

        /**
         * Recalculates all model data based on current assumptions.
         */
        function calculateModel() {
            // Calculate device-specific projections
            model.hvacProjections = calculateDeviceProjections('hvac', model.assumptions);
            model.whProjections = calculateDeviceProjections('wh', model.assumptions);

            // Calculate summary
            model.summary = [];
            for (let y = 0; y <= model.assumptions.projectionYears; y++) {
                const hvacLoad = model.hvacProjections[y] ? model.hvacProjections[y].annualControllableLoad : 0;
                const whLoad = model.whProjections[y] ? model.whProjections[y].annualControllableLoad : 0;
                const totalKw = hvacLoad + whLoad;

                model.summary.push({
                    year: y,
                    hvacKw: hvacLoad,
                    whKw: whLoad,
                    totalKw: totalKw,
                    totalMw: totalKw / 1000,
                });
            }
        }

        // --- Rendering Logic ---

        /**
         * Renders the projection table for a specific device type.
         * @param {HTMLElement} tableBody - The tbody element to populate.
         * @param {Array<object>} data - The projection data.
         */
        function renderProjectionsTable(tableBody, data) {
            tableBody.innerHTML = ''; // Clear existing rows
            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.year}</td>
                    <td>${row.eligibleMarketRemaining.toLocaleString()}</td>
                    <td>${(row.annualAdoptionRate * 100).toFixed(2)}%</td>
                    <td>${row.newInstallations.toLocaleString()}</td>
                    <td>${row.cumulativeInstallations.toLocaleString()}</td>
                    <td>${row.devicesRetired.toLocaleString()}</td>
                    <td>${row.cumulativeActiveDevices.toLocaleString()}</td>
                    <td>${row.annualControllableLoad.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>
                `;
                tableBody.appendChild(tr);
            });
        }

        /**
         * Renders the total controllable load summary table.
         * @param {HTMLElement} tableBody - The tbody element to populate.
         * @param {Array<object>} data - The summary data.
         */
        function renderSummaryTable(tableBody, data) {
            tableBody.innerHTML = ''; // Clear existing rows
            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.year}</td>
                    <td>${row.hvacKw.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>
                    <td>${row.whKw.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>
                    <td>${row.totalKw.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>
                    <td>${row.totalMw.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>
                `;
                tableBody.appendChild(tr);
            });
        }

        /**
         * Renders a simple bar chart for total controllable load.
         * @param {HTMLElement} chartContainer - The container for the chart.
         * @param {Array<object>} data - The summary data.
         */
        function renderChart(chartContainer, data) {
            chartContainer.innerHTML = ''; // Clear existing chart
            const maxMw = Math.max(...data.map(d => d.totalMw));

            data.forEach(row => {
                if (row.year === 0) return; // Skip year 0 for chart
                const barWidth = (row.totalMw / maxMw) * 100; // Percentage width
                const chartRow = document.createElement('div');
                chartRow.classList.add('chart-row');
                chartRow.innerHTML = `
                    <div class="chart-year">Y${row.year}:</div>
                    <div class="chart-bar-container">
                        <div class="chart-bar" style="width: ${barWidth}%"></div>
                    </div>
                    <div class="chart-value">${row.totalMw.toLocaleString(undefined, { maximumFractionDigits: 2 })} MW</div>
                `;
                chartContainer.appendChild(chartRow);
            });
        }

        /**
         * Main render function to update all tables and chart.
         */
        function renderModel() {
            renderProjectionsTable(hvacTableBody, model.hvacProjections);
            renderProjectionsTable(whTableBody, model.whProjections);
            renderSummaryTable(summaryTableBody, model.summary);
            renderChart(controllableLoadChart, model.summary);
        }

        // --- Event Listeners and Initialization ---

        /**
         * Updates a single assumption value and recalculates/renders the model.
         * @param {Event} event - The input change event.
         */
        function updateAssumption(event) {
            const inputId = event.target.id;
            let value = parseFloat(event.target.value);
            if (event.target.type === 'text') { // Handle text inputs if any, though currently all are numbers
                value = event.target.value;
            }

            // Convert percentages to decimals
            if (inputId.includes('adoptionRate') || inputId.includes('Factor') || inputId.includes('Rate')) {
                value /= 100;
            }

            model.assumptions[inputId] = value;
            calculateModel();
            renderModel();
        }

        // Attach event listeners to all input fields
        for (const key in inputElements) {
            if (inputElements.hasOwnProperty(key)) {
                inputElements[key].addEventListener('input', updateAssumption);
            }
        }

        // Set initial input values from model.assumptions
        function initializeInputs() {
            for (const key in inputElements) {
                if (inputElements.hasOwnProperty(key)) {
                    let value = model.assumptions[key];
                    // Convert decimals back to percentages for display in input fields
                    if (key.includes('adoptionRate') || key.includes('Factor') || key.includes('Rate')) {
                        value *= 100;
                    }
                    inputElements[key].value = value;
                }
            }
        }

        // Initial calculation and render on page load
        initializeInputs();
        calculateModel();
        renderModel();
    </script>
</body>
</html>
